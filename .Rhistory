p <- 15
n <- 100
TrueBeta <- matrix(rnorm(p), nrow = p, ncol = 1)
TrueSigma2 <- 0.4
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- X %*% TrueBeta + rnorm(n, sd = sqrt(TrueSigma2))
###OLS Regression
regOLS <- lm(Y ~ -1 + X)
###Load lmBayes
library(devtools)
devtools::load_all("/Users/Sam/Desktop/lmBayes")
devtools::document("/Users/Sam/Desktop/lmBayes")
help(lmBayes::lm)
help(lm)
help("lmBayes::lm")
help("lmBayes:::lm")
###Hyperparameters
Hypers = list(Beta = 1000, Sigma2 = c(0.001, 0.001))
###Initial Values
Inits = list(Beta = matrix(rep(0, p), nrow = p, ncol = 1), Sigma2 = 1)
###Run Bayesian Linear Regression
begin <- Sys.time()
n.sims <- 100000
regBayes <- lmBayes::lm(Y, X, Hypers, Inits, NSims = n.sims)
after <- Sys.time()
after - begin
###Simulate Data
set.seed(54)
p <- 15
n <- 100
TrueBeta <- matrix(rnorm(p), nrow = p, ncol = 1)
TrueSigma2 <- 0.4
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- X %*% TrueBeta + rnorm(n, sd = sqrt(TrueSigma2))
###OLS Regression
regOLS <- lm(Y ~ -1 + X)
###Load lmBayes
library(devtools)
devtools::load_all("/Users/Sam/Desktop/lmBayes")
devtools::document("/Users/Sam/Desktop/lmBayes")
###Simulate Data
set.seed(54)
p <- 15
n <- 100
TrueBeta <- matrix(rnorm(p), nrow = p, ncol = 1)
TrueSigma2 <- 0.4
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- X %*% TrueBeta + rnorm(n, sd = sqrt(TrueSigma2))
###OLS Regression
regOLS <- lm(Y ~ -1 + X)
###Load lmBayes
library(devtools)
devtools::load_all("/Users/Sam/Desktop/lmBayes")
devtools::document("/Users/Sam/Desktop/lmBayes")
###Simulate Data
set.seed(54)
p <- 15
n <- 100
TrueBeta <- matrix(rnorm(p), nrow = p, ncol = 1)
TrueSigma2 <- 0.4
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- X %*% TrueBeta + rnorm(n, sd = sqrt(TrueSigma2))
###OLS Regression
regOLS <- lm(Y ~ -1 + X)
###Load lmBayes
library(devtools)
devtools::load_all("/Users/Sam/Desktop/lmBayes")
devtools::document("/Users/Sam/Desktop/lmBayes")
###Simulate Data
set.seed(54)
p <- 15
n <- 100
TrueBeta <- matrix(rnorm(p), nrow = p, ncol = 1)
TrueSigma2 <- 0.4
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- X %*% TrueBeta + rnorm(n, sd = sqrt(TrueSigma2))
###OLS Regression
regOLS <- lm(Y ~ -1 + X)
###Load lmBayes
library(devtools)
devtools::load_all("/Users/Sam/Desktop/lmBayes")
devtools::document("/Users/Sam/Desktop/lmBayes")
help(lm)
###Simulate Data
set.seed(54)
p <- 15
n <- 100
TrueBeta <- matrix(rnorm(p), nrow = p, ncol = 1)
TrueSigma2 <- 0.4
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- X %*% TrueBeta + rnorm(n, sd = sqrt(TrueSigma2))
###OLS Regression
regOLS <- lm(Y ~ -1 + X)
###Load lmBayes
library(devtools)
devtools::load_all("/Users/Sam/Desktop/lmBayes")
devtools::document("/Users/Sam/Desktop/lmBayes")
help(lm)
###Simulate Data
set.seed(54)
p <- 15
n <- 100
TrueBeta <- matrix(rnorm(p), nrow = p, ncol = 1)
TrueSigma2 <- 0.4
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- X %*% TrueBeta + rnorm(n, sd = sqrt(TrueSigma2))
###OLS Regression
regOLS <- lm(Y ~ -1 + X)
###Load lmBayes
library(devtools)
devtools::load_all("/Users/Sam/Desktop/lmBayes")
devtools::document("/Users/Sam/Desktop/lmBayes")
help(lm)
###Simulate Data
set.seed(54)
p <- 15
n <- 100
TrueBeta <- matrix(rnorm(p), nrow = p, ncol = 1)
TrueSigma2 <- 0.4
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- X %*% TrueBeta + rnorm(n, sd = sqrt(TrueSigma2))
###OLS Regression
regOLS <- lm(Y ~ -1 + X)
###Load lmBayes
library(devtools)
devtools::load_all("/Users/Sam/Desktop/lmBayes")
devtools::document("/Users/Sam/Desktop/lmBayes")
help(lm)
###Simulate Data
set.seed(54)
p <- 15
n <- 100
TrueBeta <- matrix(rnorm(p), nrow = p, ncol = 1)
TrueSigma2 <- 0.4
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- X %*% TrueBeta + rnorm(n, sd = sqrt(TrueSigma2))
###OLS Regression
regOLS <- lm(Y ~ -1 + X)
###Load lmBayes
library(devtools)
devtools::load_all("/Users/Sam/Desktop/lmBayes")
devtools::document("/Users/Sam/Desktop/lmBayes")
###Hyperparameters
Hypers = list(Beta = 1000, Sigma2 = c(0.001, 0.001))
###Initial Values
Inits = list(Beta = matrix(rep(0, p), nrow = p, ncol = 1), Sigma2 = 1)
###Run Bayesian Linear Regression
begin <- Sys.time()
n.sims <- 100000
regBayes <- lmBayes::lm(Y, X, Hypers, Inits, NSims = n.sims)
after <- Sys.time()
after - begin
###Remove Burn-in (first 10%)
regBayes <- regBayes[, -(1:round(n.sims * 0.1))]
###Thin The Samples
n.thin <- 9
regBayes <- regBayes[, 1:(dim(regBayes)[2] / n.thin) * n.thin]
###Format Posterior Samples
Beta <- t(regBayes[1:p, ])
colnames(Beta) <- paste0("beta", 0:(p-1))
Sigma2 <- regBayes[p + 1, ]
###Check For MCMC Convergence
library(coda)
par(mfcol = c(1, 1))
traceplot(as.mcmc(Beta))
traceplot(as.mcmc(Sigma2))
###Check The Estimation
Summary <- round(cbind(c(TrueBeta, TrueSigma2), c(coef(regOLS), mean(regOLS$residuals^2)), apply(cbind(Beta, Sigma2), 2, mean)), 2)
colnames(Summary) <- c("True", "OLS", "Bayes")
rownames(Summary) <- c(paste0("Beta", 1:p), "Sigma2")
Summary
X0 <- matrix(rnorm(p), nrow = P, ncol = 1)
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
X0
###Start Clean
rm(list = ls())
###Simulate Data
set.seed(54)
p <- 15
n <- 100
TrueBeta <- matrix(rnorm(p), nrow = p, ncol = 1)
TrueSigma2 <- 0.4
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- X %*% TrueBeta + rnorm(n, sd = sqrt(TrueSigma2))
###OLS Regression
regOLS <- lm(Y ~ -1 + X)
###Load lmBayes
library(devtools)
devtools::load_all("/Users/Sam/Desktop/lmBayes")
devtools::document("/Users/Sam/Desktop/lmBayes")
###Hyperparameters
Hypers = list(Beta = 1000, Sigma2 = c(0.001, 0.001))
###Initial Values
Inits = list(Beta = matrix(rep(0, p), nrow = p, ncol = 1), Sigma2 = 1)
###Run Bayesian Linear Regression
begin <- Sys.time()
n.sims <- 100000
regBayes <- lmBayes::lm(Y, X, Hypers, Inits, NSims = n.sims)
after <- Sys.time()
after - begin
###Remove Burn-in (first 10%)
regBayes <- regBayes[, -(1:round(n.sims * 0.1))]
###Thin The Samples
n.thin <- 9
regBayes <- regBayes[, 1:(dim(regBayes)[2] / n.thin) * n.thin]
###Format Posterior Samples
Beta <- t(regBayes[1:p, ])
colnames(Beta) <- paste0("beta", 0:(p-1))
Sigma2 <- regBayes[p + 1, ]
###Check For MCMC Convergence
library(coda)
par(mfcol = c(1, 1))
traceplot(as.mcmc(Beta))
traceplot(as.mcmc(Sigma2))
###Check The Estimation
Summary <- round(cbind(c(TrueBeta, TrueSigma2), c(coef(regOLS), mean(regOLS$residuals^2)), apply(cbind(Beta, Sigma2), 2, mean)), 2)
colnames(Summary) <- c("True", "OLS", "Bayes")
rownames(Summary) <- c(paste0("Beta", 1:p), "Sigma2")
Summary
###Get Posterior Predictive Distribution For Example Patient
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
X0
Beta %*% X0
Sigma2
rnorm(Beta %*% X0, sqrt(Sigma2))
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD))
plot(density(PPD), adjust = 2)
plot(density(PPD, adjust = 2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0")
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "X")
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###Start Clean
rm(list = ls())
###Simulate Data
set.seed(54)
p <- 15
n <- 100
TrueBeta <- matrix(rnorm(p), nrow = p, ncol = 1)
TrueSigma2 <- 0.4
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- X %*% TrueBeta + rnorm(n, sd = sqrt(TrueSigma2))
###OLS Regression
regOLS <- lm(Y ~ -1 + X)
###Load lmBayes
library(devtools)
devtools::load_all("/Users/Sam/Desktop/lmBayes")
devtools::document("/Users/Sam/Desktop/lmBayes")
###Hyperparameters (Weakly-informative priors)
Hypers = list(Beta = 1000, Sigma2 = c(0.001, 0.001))
###Initial Values
Inits = list(Beta = matrix(rep(0, p), nrow = p, ncol = 1), Sigma2 = 1)
###Run Bayesian Linear Regression
begin <- Sys.time()
n.sims <- 100000
regBayes <- lmBayes::lm(Y, X, Hypers, Inits, NSims = n.sims)
after <- Sys.time()
after - begin
###Remove Burn-in (first 10%)
regBayes <- regBayes[, -(1:round(n.sims * 0.1))]
###Thin The Samples
n.thin <- 9
regBayes <- regBayes[, 1:(dim(regBayes)[2] / n.thin) * n.thin]
###Format Posterior Samples
Beta <- t(regBayes[1:p, ])
colnames(Beta) <- paste0("beta", 0:(p-1))
Sigma2 <- regBayes[p + 1, ]
###Check For MCMC Convergence
library(coda)
par(mfcol = c(1, 1))
traceplot(as.mcmc(Beta))
traceplot(as.mcmc(Sigma2))
###Check The Estimation
Summary <- round(cbind(c(TrueBeta, TrueSigma2), c(coef(regOLS), mean(regOLS$residuals^2)), apply(cbind(Beta, Sigma2), 2, mean)), 2)
colnames(Summary) <- c("True", "OLS", "Bayes")
rownames(Summary) <- c(paste0("Beta", 1:p), "Sigma2")
Summary
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
###OLS Regression
regOLS <- lm(Y ~ -1 + X)
###Start Clean
rm(list = ls())
###Simulate Data
set.seed(54)
p <- 15
n <- 100
TrueBeta <- matrix(rnorm(p), nrow = p, ncol = 1)
TrueSigma2 <- 0.4
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- X %*% TrueBeta + rnorm(n, sd = sqrt(TrueSigma2))
###OLS Regression
regOLS <- lm(Y ~ -1 + X)
X
###Start Clean
rm(list = ls())
###Simulate Data
set.seed(54)
p <- 15
n <- 100
TrueBeta <- matrix(rnorm(p), nrow = p, ncol = 1)
TrueSigma2 <- 0.4
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- X %*% TrueBeta + rnorm(n, sd = sqrt(TrueSigma2))
###OLS Regression
regOLS <- lm(Y ~ -1 + X)
###Simulate Data
set.seed(54)
p <- 15
n <- 100
TrueBeta <- matrix(rnorm(p), nrow = p, ncol = 1)
TrueSigma2 <- 0.4
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- X %*% TrueBeta + rnorm(n, sd = sqrt(TrueSigma2))
X
dim(X)
###OLS Regression
regOLS <- lm(Y ~ -1 + X)
lm
###Start Clean
rm(list = ls())
###Simulate Data
set.seed(54)
p <- 15
n <- 100
TrueBeta <- matrix(rnorm(p), nrow = p, ncol = 1)
TrueSigma2 <- 0.4
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- X %*% TrueBeta + rnorm(n, sd = sqrt(TrueSigma2))
###OLS Regression
regOLS <- stats::lm(Y ~ -1 + X)
stats::lm
###Load lmBayes
library(devtools)
devtools::load_all("/Users/Sam/Desktop/lmBayes")
devtools::document("/Users/Sam/Desktop/lmBayes")
###Hyperparameters (Weakly-informative priors)
Hypers = list(Beta = 1000, Sigma2 = c(0.001, 0.001))
###Initial Values
Inits = list(Beta = matrix(rep(0, p), nrow = p, ncol = 1), Sigma2 = 1)
###Run Bayesian Linear Regression
begin <- Sys.time()
n.sims <- 100000
regBayes <- lmBayes::lm(Y, X, Hypers, Inits, NSims = n.sims)
after <- Sys.time()
after - begin
###Remove Burn-in (first 10%)
regBayes <- regBayes[, -(1:round(n.sims * 0.1))]
###Thin The Samples
n.thin <- 9
regBayes <- regBayes[, 1:(dim(regBayes)[2] / n.thin) * n.thin]
###Format Posterior Samples
Beta <- t(regBayes[1:p, ])
colnames(Beta) <- paste0("beta", 0:(p-1))
Sigma2 <- regBayes[p + 1, ]
###Check For MCMC Convergence
library(coda)
par(mfcol = c(1, 1))
traceplot(as.mcmc(Beta))
traceplot(as.mcmc(Sigma2))
###Check The Estimation
Summary <- round(cbind(c(TrueBeta, TrueSigma2), c(coef(regOLS), mean(regOLS$residuals^2)), apply(cbind(Beta, Sigma2), 2, mean)), 2)
colnames(Summary) <- c("True", "OLS", "Bayes")
rownames(Summary) <- c(paste0("Beta", 1:p), "Sigma2")
Summary
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
rownames(Summary) <- c(paste0("Beta", 0:(p -1)), "Sigma2")
Summary
library(lmBayes)
help(lmBayes::lm)
help(lm)
remove.packages(lmBayes)
remove.packages("lmBayes")
###Start Clean
rm(list = ls())
###Load lmBayes
library(devtools)
devtools::install_github("berchuck/lmBayes")
library(lmBayes)
help(lm)
###Simulate Data
set.seed(54)
p <- 15
n <- 100
TrueBeta <- matrix(rnorm(p), nrow = p, ncol = 1)
TrueSigma2 <- 0.4
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- X %*% TrueBeta + rnorm(n, sd = sqrt(TrueSigma2))
###OLS Regression
regOLS <- stats::lm(Y ~ -1 + X)
###Hyperparameters (Weakly-informative priors)
Hypers = list(Beta = 1000, Sigma2 = c(0.001, 0.001))
###Initial Values
Inits = list(Beta = matrix(rep(0, p), nrow = p, ncol = 1), Sigma2 = 1)
###Run Bayesian Linear Regression
begin <- Sys.time()
n.sims <- 100000
regBayes <- lmBayes::lm(Y, X, Hypers, Inits, NSims = n.sims)
after <- Sys.time()
after - begin
###Remove Burn-in (first 10%)
regBayes <- regBayes[, -(1:round(n.sims * 0.1))]
###Thin The Samples
n.thin <- 9
regBayes <- regBayes[, 1:(dim(regBayes)[2] / n.thin) * n.thin]
###Format Posterior Samples
Beta <- t(regBayes[1:p, ])
colnames(Beta) <- paste0("beta", 0:(p-1))
Sigma2 <- regBayes[p + 1, ]
###Check For MCMC Convergence
library(coda)
par(mfcol = c(1, 1))
traceplot(as.mcmc(Beta))
traceplot(as.mcmc(Sigma2), main = "Sigma2")
###Check The Estimation
Summary <- round(cbind(c(TrueBeta, TrueSigma2), c(coef(regOLS), mean(regOLS$residuals^2)), apply(cbind(Beta, Sigma2), 2, mean)), 2)
colnames(Summary) <- c("True", "OLS", "Bayes")
rownames(Summary) <- c(paste0("Beta", 0:(p -1)), "Sigma2")
Summary
###Get Posterior Predictive Distribution For Example Patient X0
X0 <- matrix(rnorm(p), nrow = p, ncol = 1)
PPD <- rnorm(Beta %*% X0, sqrt(Sigma2))
plot(density(PPD, adjust = 2), main = "Posterior predictive distribution for X0", xlab = "Outcome")
